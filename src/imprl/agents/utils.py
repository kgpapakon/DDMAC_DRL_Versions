import numpy as np
import torch


def preprocess_inputs(states, batch_size=1):
    """
    state0 = (array([0.]),
              array([[1., 1., 1., 1., 1.],
                    [0., 0., 0., 0., 0.],
                    [0., 0., 0., 0., 0.],
                    [0., 0., 0., 0., 0.]]))

    t = 0
    shape: (Nd, Nc)
    Nd: number of damage states
    Nc: number of components
    system_state =  array([[1., 1., 1., 1., 1.],
                           [0., 0., 0., 0., 0.],
                           [0., 0., 0., 0., 0.],
                           [0., 0., 0., 0., 0.]])

    # we flatten column wise
    shape: (1 + Nd*Nc)
    _concat = array([0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
                    1., 0., 0., 0.])

    # we reshape so that first dim has number of samples
    shape: (1, 1 + Nd*Nc)

    """

    # 

    if batch_size > 1:

        concat_list = []
        for i, state in enumerate(states):
            t, system_state = state
            concat_list.append(np.concatenate((t, system_state.flatten('F'))))
            _concat = np.array(concat_list)

    else:
        t, system_state = states
        _concat = np.concatenate((t, system_state.flatten('F'))).reshape(1, -1)

    return torch.tensor(_concat)


def _get_from_device(input):

    return input.cpu().detach().numpy()


def get_multiagent_obs(t_obs, S, M, batch_size=1):

    """
    Convert observation to multiagent observation.

    Parameters
    ----------
    t_obs : torch.tensor
        shape: (batch_size, n_components*n_damage_states + 1)

    S : int
        number of damage states

    M : int
        number of components

    batch_size : int

    Returns
    -------
    t_ma_obs : torch.tensor
        shape: (batch_size, n_components, n_damage_states + 1)
    
    Example:
    --------
    M, S = 7, 4
    obs = (array([0.]),
            array([[1., 1., 1., 1., 1., 1., 1.],
                    [0., 0., 0., 0., 0., 0., 0.],
                    [0., 0., 0., 0., 0., 0., 0.],
                    [0., 0., 0., 0., 0., 0., 0.]]))

    t_obs = tensor([[0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1.,
                    0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.]])

    t_ma_obs = tensor([[[0., 1., 0., 0., 0.],
                        [0., 1., 0., 0., 0.],
                        [0., 1., 0., 0., 0.],
                        [0., 1., 0., 0., 0.],
                        [0., 1., 0., 0., 0.],
                        [0., 1., 0., 0., 0.],
                        [0., 1., 0., 0., 0.]]])

    obs_2 = (array([0.86]),
            array([[0.99547616, 0.23543299, 0.80288328, 0.00766682, 0.        ,
                    0.        , 0.99572303],
                    [0.00452384, 0.74998909, 0.1399358 , 0.98538205, 0.        ,
                    0.0358036 , 0.00427697],
                    [0.        , 0.01457792, 0.05572918, 0.00695112, 0.        ,
                    0.79650637, 0.        ],
                    [0.        , 0.        , 0.00145174, 0.        , 1.        ,
                    0.16769004, 0.        ]]))

    t_obs = tensor([[0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00,
                    0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00,
                    0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00,
                    0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00,
                    0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00],
                    
                    [8.8000e-01, 9.9572e-01, 4.2805e-03, 0.0000e+00, 0.0000e+00, 1.4554e-02,
                    9.7847e-01, 6.9763e-03, 0.0000e+00, 8.0384e-01, 1.3961e-01, 5.5345e-02,
                    1.2065e-03, 3.8313e-04, 9.9380e-01, 5.8135e-03, 0.0000e+00, 0.0000e+00,
                    0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
                    1.0000e+00, 9.9573e-01, 4.2736e-03, 0.0000e+00, 0.0000e+00]])

    t_ma_obs = tensor([[[0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00],
                        [0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00],
                        [0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00],
                        [0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00],
                        [0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00],
                        [0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00],
                        [0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00]],

                        [[8.8000e-01, 9.9572e-01, 4.2805e-03, 0.0000e+00, 0.0000e+00],
                        [8.8000e-01, 1.4554e-02, 9.7847e-01, 6.9763e-03, 0.0000e+00],
                        [8.8000e-01, 8.0384e-01, 1.3961e-01, 5.5345e-02, 1.2065e-03],
                        [8.8000e-01, 3.8313e-04, 9.9380e-01, 5.8135e-03, 0.0000e+00],
                        [8.8000e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00],
                        [8.8000e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00],
                        [8.8000e-01, 9.9573e-01, 4.2736e-03, 0.0000e+00, 0.0000e+00]]])

    """

    t_ma_obs = torch.empty((batch_size, M, S+1))

    if batch_size == 1:
        t_ma_obs[:, :, 0] = t_obs[0][0]
        t_ma_obs[:, :, 1:] = t_obs[0][1:].view(M, S)
    elif batch_size > 1:
        t_ma_obs[:, :, 0] = t_obs[:, 0].unsqueeze(1).expand(-1, M) # repeat time step
        t_ma_obs[:, :, 1:] = t_obs[:, 1:].view(batch_size, M, S) # reshape damage states
    return t_ma_obs

def get_multiagent_obs_with_idx(t_obs, S, M, batch_size=1):

    """
    Append agent index to observation.

    Parameters
    ----------
    t_obs : torch.Tensor
        Observation tensor of shape (batch_size, n_components*n_damage_states+1)

    S : int
        number of damage states

    M : int
        number of components

    batch_size : int
        Batch size

    Returns
    -------
    t_ma_obs : torch.Tensor
        Observation tensor of shape (batch_size, n_components, n_components+n_damage_states+1)

    Example:
    --------
    M, S = 7, 4
    obs = (array([0.]),
            array([[1., 1., 1., 1., 1., 1., 1.],
                    [0., 0., 0., 0., 0., 0., 0.],
                    [0., 0., 0., 0., 0., 0., 0.],
                    [0., 0., 0., 0., 0., 0., 0.]]))

    t_obs = tensor([[0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1.,
                    0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.]])

    t_ma_obs = tensor([[[0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
                        [0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
                        [0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
                        [0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
                        [0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
                        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
                        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]]])
    
    t_ma_obs = tensor([[[0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000],
                        [0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000],
                        [0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000],
                        [0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000]],

                        [[0.8600, 0.9906, 0.0094, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.8600, 0.9908, 0.0092, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.8600, 0.7985, 0.1368, 0.0538, 0.0109, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.8600, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000],
                        [0.8600, 0.6143, 0.2646, 0.1049, 0.0162, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000],
                        [0.8600, 0.0118, 0.8533, 0.0951, 0.0398, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000],
                        [0.8600, 0.0050, 0.9879, 0.0070, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000]]])
    """

    t_ma_obs = get_multiagent_obs(t_obs, S, M, batch_size=batch_size)
    idx = torch.eye(M).unsqueeze(0).expand(batch_size, -1, -1) # agent indices

    return torch.cat((t_ma_obs, idx), dim=2)